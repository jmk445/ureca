package app.phone.ui;
import java.awt.BorderLayout;
import java.util.List;

import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

import app.phone.dto.Phone;
import app.phone.dao.PhoneDao;
import app.phone.dao.ShoppingCartDao;

public class ShoppingCartDialog extends JDialog {
	private JTextField phoneNameField, phoneMakerField, phonePriceField, phoneCntField;
	private JButton buyButton;	
	private DefaultTableModel tableModel;// grid data
	private JTable table; // grid ui component
	private ShoppingCartDao cartDao = new ShoppingCartDao();
	public ShoppingCartDialog(MallManager parent) {
		setTitle("장바구니");
		setSize(300, 200);
		setLayout(new BorderLayout());
		setLocationRelativeTo(parent); // 부모에 맞게
		
		// table
		tableModel = new DefaultTableModel(new Object[] {"휴대폰 이름", "가격", "제조사", "수량" }, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // All cells are not editable
            }
		};
		table = new JTable(tableModel);
		
		listPhonesInCart();
		
		// button panel, button
		JPanel buttonPanel = new JPanel();			
		buyButton = new JButton("구매하기");				
		buttonPanel.add(buyButton);		

		// add inputPanel, buttonPanel to Dialog
		
		add(buttonPanel, BorderLayout.SOUTH);
				
		
		// add button actionListner
//		buyButton.addActionListener( e -> {
//			int bookId = Integer.parseInt(bookIdField.getText());
//			String bookName = bookNameField.getText();
//			String publisher = publisherField.getText();
//			int price = Integer.parseInt(priceField.getText());
//			
//			parent.insertBook(new Book(bookId, bookName, publisher, price));
//			//아니 이렇게 insert하고 자식 prompt(이 코드)를 닫는 로직이 없음
//			//list 된 것 이 자동으로 위로 올라오다보니 parent가 위로 올라옴 자식 prompt는 뒤에 숨어 있는 버그
//			dispose();
//		});
	}
	private void clearTable() {
		tableModel.setRowCount(0);
	}
	
	public void listPhonesInCart() {
		clearTable();
		
		List<Phone> phoneList = cartDao.listPhonesInCart(1);
		
		for (Phone  phone: phoneList) {
			tableModel.addRow(new Object[] {phone.getPhoneName(),phone.getPhoneprice(), phone.getPhonemaker(),cartDao.getCnt(1)  });
		}
	}
	
}

package jdbc;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class Test2 {
	// MySQL에 접근하기 위해 필요한 3가지
	static String url = "jdbc:mysql://localhost:3306/madangdb";
	static String user = "root";
	static String pwd = "root";
	public static void main(String[] args) throws Exception{
	
		
//		//update
////		{
////			String updateSQL = "update customer set address = '대한민국 부산' where custid = 6;"; //''를 무조건 해야한다.
////			int ret = stmt.executeUpdate(updateSQL); //등록 수정 삭제 모두 이 구문을 사용한다.			
////			System.out.println(ret); //1 : 정상 작동 or row no : affected row cnt (0도 가능)
////			//return은 마우스 올려서 확인
////		}
//		
//		//delete
//		{
//			String deleteSQL = "delete from customer where custid = '6';"; //''를 무조건 해야한다.
//			int ret = stmt.executeUpdate(deleteSQL); //등록 수정 삭제 모두 이 구문을 사용한다.			
//			System.out.println(ret); //1 : 정상 작동 or row no : affected row cnt (0도 가능)
//			//return은 마우스 올려서 확인
//		}
//		
//		
//		//select list (복수 건)
//		{
////			String selectSql = "select * from customer;";
////			String selectSql = "select custid, name, address, phone from customer;";
//			String selectSql = "select custid, name cust_name, address cust_address, phone cust_phone from customer;";//alias를 사용하는 경우에는 alias버전으로 똑같이 바꿔서 getString으로 얻어야한다.
//
//			rs = stmt.executeQuery(selectSql); //executeUpdate가 아니다!!
////			next() -> 다음 row 이동, 현재 row가 유효한지 아닌지 return 해줌
////			따라서 계속 true이다가 마지막에 false가 된다. 
//			while (rs.next()) { //row 이동
//				//해당 row에서 필요한 column획득 <- rs.getInt(), rs.getString() (괄호안에 인덱스도 사용가능하지만, 일반적으로 컬럼명을 사용) (인덱스만 썼다가는 테[이블의 변화가 있을 경우 일관성 x)				
//				System.out.println(rs.getInt("custid") + "| " + rs.getString("cust_name")+ "| " + rs.getString("address")+ "| " + rs.getString("phone"));				
//			}
//		}
		//select one (단 건)
//		
//		{	
//			String selectSql = "select * from customer where custid = 4;";
//
//			rs = stmt.executeQuery(selectSql); //executeUpdate가 아니다!!
////			next() -> 다음 row 이동, 현재 row가 유효한지 아닌지 return 해줌
////			따라서 계속 true이다가 마지막에 false가 된다. 
//			while (rs.next()) { //row 이동
//				//해당 row에서 필요한 column획득 <- rs.getInt(), rs.getString() (괄호안에 인덱스도 사용가능하지만, 일반적으로 컬럼명을 사용) (인덱스만 썼다가는 테[이블의 변화가 있을 경우 일관성 x)				
//				System.out.println(rs.getInt("custid") + "| " + rs.getString("cust_name")+ "| " + rs.getString("address")+ "| " + rs.getString("phone"));				
//			}
//		}
			
		
		
//		if( rs == null ) rs.close();		
//		stmt.close(); //이것도 닫아줘야한다. stmt 먼저 닫아줘야한다.
//		con.close(); //이걸 안하면 타임아웃 돼서 끝나는데 이걸로 일부러 꺼준다.
//		
		insertCustomer();
	}
	
	static void insertCustomer() {
		Connection con = null;
		Statement stmt = null;
		try {
			con = DriverManager.getConnection(url,user,pwd);	
			stmt = con.createStatement();
			String insertSQL = "insert into customer values(6, '손흥민', 'gaegeum', '010-1234-5678');"; //''를 무조건 해야한다.
////		int ret = stmt.executeUpdate(insertSQL); //등록 수정 삭제 모두 이 구문을 사용한다.
////		//return은 마우스 올려서 확인
			
		}catch (SQLException e) {
			e.printStackTrace();
		}finally {
			try {
				stmt.close();
				con.close();
			}catch(SQLException e) {
				e.printStackTrace();
			}
		}
	
		
	}
	
	static void updateCustomer() {
		Connection con = null;
		Statement stmt = null;
		try {
			con = DriverManager.getConnection(url,user,pwd);	
			stmt = con.createStatement();
			String updateSQL = "update customer set address = '대한민국 부산' where custid = 6;"; //''를 무조건 해야한다.
			int ret = stmt.executeUpdate(updateSQL);			
			System.out.println(ret);
		}catch (SQLException e) {
			e.printStackTrace();
		}finally {
			try {
				stmt.close();
				con.close();
			}catch(SQLException e) {
				e.printStackTrace();
			}
		}
			
	}
//	static void insertCustomer() {
//		
//		
//	}
//	static void insertCustomer() {
//		
//		
//	}
//	static void insertCustomer() {
//		
//		
//	}
//	static void insertCustomer() {
//		
//		
//	}


}

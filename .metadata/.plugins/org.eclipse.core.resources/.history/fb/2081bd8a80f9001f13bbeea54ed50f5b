package jdbc;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
// Statement 사용
// CRUD 를 메소드화 - url, user, pwd 를 static
//   메소드내에서 Connection, Statement, ResutSet 객체화
//   메소드내에서 예외 처리

//Statement -> prepraedStatement 전환
//하드 코딩된 value -> 메소드의 parameter
//Dto -> select 에 적용

public class Test3 {
    // MySQL 에 접근하기 위해 필요한 3가지
    static String url = "jdbc:mysql://localhost:3306/madangdb";
    static String user = "root";
    static String pwd = "root";
    
    public static void main(String[] args) {
        
//      insertCustomer(7, "손흥민", "대한민국 부산", "010-1111-1111");
      updateCustomer(7,"대한민국 부산 개금동");
//      deleteCustomer();
//    	listCustomer();
//      detailCustomer();
       
    }
    static void insertCustomer(int custId, String name, String address, String phone) {
        Connection con = null;
        PreparedStatement pstmt = null;
        //prepared인 경우 paramter로 넘겨주기 위해 위로 올라온다 sql문이
        String insertSql = "insert into customer values ( ?, ?, ?, ? ); "; //value 부분을 ?로 대체        
        try {
            con = DriverManager.getConnection(url, user, pwd);
            pstmt = con.prepareStatement(insertSql); //물음표가 채워진 sql을 보내준다.
            //?로 넘겨주면 이 구문을 보내준 순간 parsing을 미리 해두고 ? 값을 기다리고 있는다.
            pstmt.setInt(1,custId);
            pstmt.setString(2, name);
            pstmt.setString(3, address);
            pstmt.setString(4, phone);
            int ret = pstmt.executeUpdate(); //insertsql을 넘겨주면 안된다.
            System.out.println(ret);
            
        }catch(SQLException e) {
            e.printStackTrace();
        }finally {
            try {
                pstmt.close();
                con.close();
            }catch(SQLException e) {
                e.printStackTrace();
            }
        }
    }
    
    static void updateCustomer(int custId, String address) {
        Connection con = null;
        Statement stmt = null;
        
        try {
            con = DriverManager.getConnection(url, user, pwd);
            stmt = con.createStatement();
            
            String updateSql = "update customer set address = '대한민국 서울' where custid = 8; ";
            int ret = stmt.executeUpdate(updateSql);
            System.out.println(ret);
            
        }catch(SQLException e) {
            e.printStackTrace();
        }finally {
            try {
                stmt.close();
                con.close();
            }catch(SQLException e) {
                e.printStackTrace();
            }
        }
    }
    
    static void deleteCustomer() {
        Connection con = null;
        Statement stmt = null;
        
        try {
            con = DriverManager.getConnection(url, user, pwd);
            stmt = con.createStatement();
            
            String deleteSql = "delete from customer where custid = 6; ";
            int ret = stmt.executeUpdate(deleteSql);
            System.out.println(ret);
            
        }catch(SQLException e) {
            e.printStackTrace();
        }finally {
            try {
                stmt.close();
                con.close();
            }catch(SQLException e) {
                e.printStackTrace();
            }
        }
    }
    
    static void listCustomer() {
        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            con = DriverManager.getConnection(url, user, pwd);
            stmt = con.createStatement();            
            
            String selectSql = "select custid, name, address, phone from customer; ";
            rs = stmt.executeQuery(selectSql);
	        while(rs.next()) { // row 이동	          
	            System.out.println(rs.getInt("custid") + " | " + rs.getString("name")+ " | " + rs.getString("address")+ " | " + rs.getString("phone"));	            
	        }
            
        }catch(SQLException e) {
            e.printStackTrace();
        }finally {
            try {
                stmt.close();
                con.close();
            }catch(SQLException e) {
                e.printStackTrace();
            }
        }
    }
    
    static void detailCustomer() {
    	Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            con = DriverManager.getConnection(url, user, pwd);
            stmt = con.createStatement();            
            
            String selectSql = "select * from customer where custid = 4; ";
////        String selectSql = "select custid, name, address, phone from customer where custid = 4; ";
////        String selectSql = "select custid, name cust_name, address cust_address, phone cust_phone from customer where custid = 4; "; // alias
      rs = stmt.executeQuery(selectSql);
      if(rs.next()) { // 1건에 대해 있고 없고
          // 해당 row 에서 필요한 column 획득 <- rs.getInt(), rs.getString() ( 괄호안에 인덱스도 사용가능하지만, 일반적으로 컬럼명을 사용 )
          System.out.println(rs.getInt("custid") + " | " + rs.getString("name")+ " | " + rs.getString("address")+ " | " + rs.getString("phone"));
//            System.out.println(rs.getInt("custid") + " | " + rs.getString("cust_name")+ " | " + rs.getString("cust_address")+ " | " + rs.getString("cust_phone")); // alias
      }
            
        }catch(SQLException e) {
            e.printStackTrace();
        }finally {
            try {
                stmt.close();
                con.close();
            }catch(SQLException e) {
                e.printStackTrace();
            }
        }
    }
}